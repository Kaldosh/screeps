var roleHarvester = {

    /** @param {Creep} creep **/
    run: function(creep) {
        if (creep.room.controller.ticksToDowngrade<1000) {
            creep.tempRole="upgrader";
            creep.tempRoleUntil=Game.time+100;
            creep.say("need upgrade");
            return;
        }
	    if(creep.carry.energy < creep.carryCapacity) {
	        var dropped=null;//creep.pos.findInRange(FIND_DROPPED_ENERGY,1);
	        if (dropped)
	        {
    	        creep.pickup(dropped);
    	        creep.say("pickup");
	        } else {
                var sources = creep.room.find(FIND_SOURCES);
                var mysource= sources[creep.memory.sourceId||creep.room.memory.defaultSourceId||0];
                if(creep.harvest(mysource) == ERR_NOT_IN_RANGE) {
                    var result = creep.moveTo(mysource);
                    if (result && result !=ERR_TIRED) creep.say("move failed:" + result);
                }
	        }
	    } else {
	        //dump
	        var nearestContainer = creep.pos.findClosestByRange(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return (structure.structureType == STRUCTURE_CONTAINER) && structure.store.energy < structure.storeCapacity;
                    }
            });
            //console.log("nearestContainer to harvester:" + nearestContainer);
            if(nearestContainer) {
                if (nearestContainer.hits<nearestContainer.hitsMax * 0.5) {
                    creep.repair(nearestContainer);
                } else {
                    var result=creep.transfer(nearestContainer, RESOURCE_ENERGY);
                    if(result ==0)
                    {
                        creep.say("dumped");
                    } else if (result==ERR_NOT_IN_RANGE) {
                        var result = creep.moveTo(nearestContainer);
                        if (result && result !=ERR_TIRED) creep.say("move failed:" + result);
                    }
                }
            } else {
                creep.say("full");
                creep.memory.tempRole="distributor";
                creep.memory.tempRoleUntil=Game.time+50;
            }
        }
	}
};

module.exports = roleHarvester;
