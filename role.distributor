var go = require("go");
var roleDistributor = {

    /** @param {Creep} creep **/
    run: function(creep) {

        if(creep.memory.distributing && creep.carry.energy == 0) {
            creep.memory.distributing = false;
            delete creep.memory.tempRole;
            delete creep.memory.tempRoleUntil;
            if (creep.memory.role=="distributor") {
                creep.say('collecting');
            } else {
                creep.say("ret->" + creep.memory.role);
            }
	    }
	    if(!creep.memory.distributing && creep.carry.energy == creep.carryCapacity) {
	        creep.memory.distributing = true;
	        var justFlippedToDist=true;
	        creep.say('distributing');
	    }
	    
	    if (!creep.memory.distributing) {
            go.collect(creep);
	    } else {
	        //distribute
            var targets= creep.room.find(FIND_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType == STRUCTURE_EXTENSION ||
                            structure.structureType == STRUCTURE_SPAWN ||
                            structure.structureType == STRUCTURE_TOWER) && structure.energy < structure.energyCapacity;
                }
            });
            if(targets.length > 0) {
                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    var result = creep.moveTo(targets[0]);
                    if (result && result !=ERR_TIRED) creep.say("move failed:" + result);
                }
            } else {
                //if (Game.time %10 == 0)//nothing to do - just get out of the way
                {
                    creep.say("idle->builder");
                    creep.memory.tempRole="builder";
                    creep.memory.tempRoleUntil=Game.time+50;
                }
            }
        }
	}
};

module.exports = roleDistributor;
