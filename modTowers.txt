module.exports = {
    run: function(){
        //return;
        var myRoom=Game.rooms["E67S56"];
        var towers = myRoom.find(FIND_STRUCTURES,{filter:{structureType:STRUCTURE_TOWER}});
        for (var i=0; i<towers.length;i++) {
            var tower=towers[i];

            var closestHostile = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
            if(closestHostile) {
                Memory.stats.towerShots++;
                tower.attack(closestHostile);
                console.log("attacked hostile:" + closestHostile + "; result:" + result);
                return;
            }
            
            var closestWounded = tower.pos.findClosestByRange(FIND_MY_CREEPS, {filter:(c)=>{c.hits<c.hitsMax}});
            if (closestWounded){
                Memory.stats.towerHeals++;
                var result = tower.heal(closestWounded);
                console.log("healed wounded:" + closestWounded + " ; result:" + result);
                return;
            }
            
            //nothing urgent, look for something to repair
            var maxWall=1000;
            var maxRoad=1000;//let walkers heal it, but get them before they decay (swamp roads lose 500, so this is only 2 ticks)
            var maxRampart=1500;
            var maxMisc=1000;
            var maxCont=1000;

            var carrierLoad=400;

            if (tower.energy>tower.energyCapacity-carrierLoad) {
                maxWall=5000;
                maxRoad=2000;
                maxRampart=4000;
                maxMisc=2000;
                if (tower.room.energyAvailable==tower.room.energyCapacityAvailable) {
                    maxWall=10000;
                    maxRoad=3000;
                    maxRampart=15000;
                    maxMisc=10000;
                }
            }

            var closestDamagedStructure = tower.pos.findClosestByRange(FIND_STRUCTURES, {
                filter: (structure) =>  { 
                    if ( structure.hits > structure.hitsMax-100) return false;
                    switch (structure.structureType){
                        case STRUCTURE_WALL: return structure.hits<maxWall;
                        case STRUCTURE_ROAD: return structure.hits<maxRoad;
                        case STRUCTURE_RAMPART: return structure.hits<maxRampart;
                        case STRUCTURE_CONTAINER: return structure.hits<maxCont;
                        default: return structure.hits<maxMisc;
                    }
            }});

            if(closestDamagedStructure) {
                    var result = tower.repair(closestDamagedStructure);
                    console.log("tower repairing:" + closestDamagedStructure + "; result:" + result);
                    Memory.stats.towerRepairs++;
                    return;
                }


        }
    }
};