module.exports = {
    spawn: function(slotId){
        
    },
    parts: function(){
        return [MOVE,CARRY,WORK]
    },
    logMulti:function(value){
        console.log(value);
    },
    run: function(creep){
        if (creep.carry.energy==0) creep.memory.mining=true;
        var standingOnIt=creep.pos.lookFor(LOOK_ENERGY);
        if (standingOnIt && standingOnIt.length>0) creep.pickup(standingOnIt[0]);

        var mySlot = Memory.slots[creep.memory.slotId];
        var mySlotPos = new RoomPosition(mySlot.pos.x, mySlot.pos.y, mySlot.pos.roomName)
        if (creep.memory.mining) {
            //this.logMulti("mining=true");
            if (creep.pos.isEqualTo(mySlotPos)){
                //this.logMulti("already there - do it");
                var result = creep.harvest(Game.getObjectById(mySlot.sourceId));
                if (result!=OK) 
                    console.log("harvest failed:" + result);
            } else {
                //this.logMulti("moving to mine:" + mySlotPos);
                var result = creep.moveTo(mySlotPos);
                if (result == OK || result == ERR_TIRED) return;
                else {
                        console.log("error moving multi " + creep + " to mine:" + result);
                }
                
            }
        }
        
        if (creep.carry.energy == creep.carryCapacity) creep.memory.mining=false;
        
        if (!creep.memory.mining){
            //we've got our energy - do something with it
            if (creep.room.controller.ticksToDowngrade<4000){
                if (creep.pos.inRangeTo(creep.room.controller, 3)){
                    var result = creep.upgradeController(creep.room.controller);
                    if (result==OK){
                        return;
                    } else {
                        console.log("error for multi doing emergency upgrading" + result);
                    }
                } else {
                    creep.moveTo(creep.room.controller);
                    return;
                }
            } else {
                //if we didn't already return, keep going
            }
            var unbuiltExtensions=creep.room.find(FIND_MY_CONSTRUCTION_SITES, {
                filter: { structureType: STRUCTURE_EXTENSION }
            });
            if (unbuiltExtensions.length>0) {
                if (creep.pos.isNearTo(unbuiltExtensions[0])){
                    creep.build(unbuiltExtensions[0]);
                } else {
                    creep.moveTo(unbuiltExtensions[0])
                }
            } else {
                //it's got extensions all built
                //TODO: points/slots structures.
                //TODO: cleanup points.distributors when dead (or check here)
                console.log("checking for dist's on source " + mySlot.sourceId);
                //TODO: false here
//if (Memory.points[mySlot.sourceId].distributors.length==0) 
{
//---------------------------------------------------- where dioes this block meet?
                    //nobody here yet - do the distributing ourselves (so someone else can spawn to help)
                    
                    
//TODO: something better about not switching all multi's to distribute if there's alrerady distributors in the room
                                    
                    if (creep.room.energyAvailable < creep.room.energyCapacityAvailable) {
                        //TODO: cache path to nearest nonfull extension (this has 2 pathfinds every single tick!)
                        var nearest = creep.pos.findClosestByPath(FIND_MY_STRUCTURES,{
                            filter: (structure) => {
                                return (structure.structureType == STRUCTURE_EXTENSION
                                    ||structure.structureType == STRUCTURE_SPAWN 
                                    //||structure.structureType == STRUCTURE_TOWER
                                    ) && structure.energy < structure.energyCapacity;
                            }
                        });
                        
                        if(nearest) {
                            var result = creep.transfer(nearest, RESOURCE_ENERGY);
                            if (result == OK){
                                //yay! transferred - we're probably empty now.
                                creep.memory.mining=true;
                            } else if (result == ERR_NOT_IN_RANGE) {
                                var result = creep.moveTo(nearest);
                                if (result == OK || result == ERR_TIRED) {
                                    //we're on our way
                                    return;
                                } else {
                                    console.log ("can't move multi to distribute");
                                }
                            }
                        } else {
                            console.log("multi found room below capacity with nothing empty");
                        }
                    } else {
                        //the room is fully charged - make sure we have a container, and fill it
                        //TODO: slot/job/source/point should have a container position (so we can rebuild it) & id (so we don't need to search)
                        var contPosRaw = Memory.points[mySlot.sourceId].containerPos;
                        
                        
                        //TODO
                        
                        
                        
                        
                        
                        var contPos = new RoomPosition(contPosRaw.x,contPosRaw.y, contPosRaw.roomName);
                        var unbuilt= contPos.lookFor(LOOK_CONSTRUCTION_SITES);
console.log("room is charged - check build found:" + unbuilt.length);

                        if (unbuilt.length>0){
                            if(creep.pos.inRangeTo(unbuilt[0],3)){
                                console.log("multi building cont:" + creep.name)
                                var result = creep.build(unbuilt[0]);
                                if (result==OK){
                                    //built it
                                    return;
                                } else {
                                    console.log("error multi building container");
                                }
                            } else {
                                console.log("multi moving to build cont:" + creep.name)
                                var result = creep.moveTo(unbuilt[0]);
                                if (result==OK|| result==ERR_TIRED){
                                    //we're on our way
                                    return;
                                } else {
                                    console.log("error moving multi to built container: " + result);
                                }
                            }
                        } else {
                            
//there's no construcion sites on our container position - but is there a container?
                            var myConts = contPos.lookFor(LOOK_STRUCTURES);
                            if (myConts.length>0){
                                //yay! we've got a container
                                var myContainer = myConts[0];//mySlotPos.findClosestByRange(FIND_STRUCTURES, {filter:{structureType:STRUCTURE_CONTAINER}});
                                //it exists - check it's mostly unharmed
                                //the 10 is because there will only be an average of 5 work parts standing there - but we could all hit it at once, so don't need to be wasteful, let the towers finish it off; but let repe\airers who are standing here do jmost of it
                                if (myContainer.hits < myContainer.hitsMax-REPAIR_POWER*5) {
                                    var result = creep.repair(myContainer);
                                    if (result == OK){
                                            return;
                                     } else if (result == ERR_NOT_IN_RANGE) {
                                        var result = creep.moveTo(myContainer);
                                        if (result == OK || result == ERR_TIRED){
                                            //ok - we're on our way
                                        } else {
                                            console.log("error moving multi to repair container:" + result);
                                        }
                                    } else {
                                        console.log("error repairing container:" + result);
                                    }
                                } else {
                                    //it's mostly undamaged - fill it up!
                                    if (myContainer.store.energy< myContainer.storeCapacity*0.5) {
                                        var result = creep.transfer(myContainer, RESOURCE_ENERGY);
                                        if (result == OK){
                                            return;
                                        } else if (result==ERR_NOT_IN_RANGE) {
                                            var result = creep.moveTo(myContainer);
                                            if (result == OK || result == ERR_TIRED){
                                                //on our way
                                                return;
                                            } else {
                                                console.log("error moving to fill container:" + result);
                                            }
                                        } else {
                                            console.log("error transferring to container:" + result);
                                        }
                                    } else {
                                        //it's full - go distribute what we're carrying (but the room is fully charges and this container is fully charged)
                                        // should we just be a distributor  for one run (to towers, and upgrading)
                                        //actually - we've got more work parts than a distributor, so we should focus on upgrading
                                        //TODO: smart logic to choose whether to distribute to towers/links/stores/etc (like the distributors would), or run all the way to upgrade
                                        creep.memory.tempRole = "upgrader";
                                        //TODO: make upgraders switch back from temp after dumping
                                    }
                                }//damaged
                            } else {
                                //got no container - make a construction site for it
                                //TODO: ------------
                                
                            }//has containers
                        }//unbuilt containers
                    }//room is charged
                }//this is not an IF block - it's just a thing
            }//unbuilt extensions
        }
    }
};